{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { Client } from \"./Client/Client\";\nimport msgpack from \"@ygoe/msgpack\";\nimport { EnumerateMidiDevicesRequest, EnumerateMidiDevicesResponse, Command, RequestResponse, SelectMidiDevicesResponse, SelectMidiDevicesRequest, EnumerateScoresResponse, EnumerateScoresRequest, LoadScoreResponse, LoadScoreRequest, SetScoreDisplayPositionRequest } from \"./Client/Commands/Command\";\nexport class SightReaderClient {\n  constructor() {\n    _defineProperty(this, \"verovio\", void 0);\n\n    _defineProperty(this, \"client\", new Client());\n\n    _defineProperty(this, \"score\", \"\");\n\n    _defineProperty(this, \"onSetScoreDisplayPositionRequested\", () => {});\n  }\n\n  static get Instance() {\n    return SightReaderClient.instance;\n  }\n\n  async setSetScoreDisplayPositionRequestedCallback(onSetScoreDisplayPositionRequested) {\n    this.onSetScoreDisplayPositionRequested = onSetScoreDisplayPositionRequested;\n  }\n\n  async getVerovio() {\n    return new _Promise((resolve, reject) => {\n      if (!this.verovio) {\n        this.verovio = new window.verovio.toolkit();\n      }\n\n      resolve(this.verovio);\n    });\n  }\n\n  async setupScore(verovioOptions) {\n    return this.getVerovio().then(verovio => {\n      var options = _objectSpread({\n        font: \"Bravura\",\n        slurThickness: 0.3,\n        spacingNonLinear: 0.7,\n        stemWidth: 0.3,\n        svgViewBox: true,\n        noHeader: true,\n        noFooter: true,\n        svgBoundingBoxes: false,\n        breaks: \"auto\",\n        pageMarginBottom: 0,\n        pageMarginLeft: 10,\n        pageMarginRight: 0,\n        pageMarginTop: 0,\n        scale: 1000\n      }, verovioOptions);\n\n      console.log(\"Setting up Verovio with options:\", options);\n      this.verovio.setOptions(options);\n      verovio.loadData(this.score);\n    });\n  }\n\n  async renderScore(pageNumber) {\n    return new _Promise((resolve, reject) => {\n      return this.getVerovio().then(verovio => {\n        console.log(\"verovio.rendertsvg:\", verovio);\n        window.verovio3 = verovio;\n        resolve(verovio.renderToSVG(pageNumber));\n      });\n    });\n  }\n\n  get Score() {\n    return this.score;\n  }\n\n  setScore(score) {\n    this.score = new TextDecoder(\"utf-8\").decode(score);\n  }\n\n  async connectCheck() {\n    if (!this.client.Socket || this.client.Socket.readyState !== this.client.Socket.OPEN) {\n      await this.client.connect();\n      this.addMessageHandlerForSetScoreDisplayPosition();\n    }\n  }\n\n  addMessageHandlerForSetScoreDisplayPosition() {\n    var self = this;\n\n    async function onResponse(event) {\n      const buffer = await new Response(event.data).arrayBuffer();\n      var message = msgpack.deserialize(buffer);\n\n      if (message.Command !== Command.SetScoreDisplayPosition && message.Kind !== RequestResponse.Request) {\n        return;\n      }\n\n      if (typeof self.onSetScoreDisplayPositionRequested === \"function\") {\n        var command = SetScoreDisplayPositionRequest.FromMessagePack(message);\n        self.onSetScoreDisplayPositionRequested(command);\n      }\n    }\n\n    console.log(\"Adding message handler for set score display position...\");\n    this.client.Socket.addEventListener(\"message\", onResponse);\n  }\n\n  async EnumerateMidiDevices() {\n    return this.SendRequest(new EnumerateMidiDevicesRequest(), Command.SelectMidiDevices, EnumerateMidiDevicesResponse);\n  }\n\n  async SelectMidiDevices(inputDeviceNames, outputDeviceNames) {\n    return this.SendRequest(new SelectMidiDevicesRequest({\n      InputDeviceNames: inputDeviceNames,\n      OutputDeviceNames: outputDeviceNames\n    }), Command.SelectMidiDevices, SelectMidiDevicesResponse);\n  }\n\n  async EnumerateScores() {\n    return this.SendRequest(new EnumerateScoresRequest(), Command.EnumerateScores, EnumerateScoresResponse);\n  }\n\n  async LoadScore(scoreFilePath) {\n    var command = new LoadScoreRequest();\n    command.FilePath = scoreFilePath;\n    return this.SendRequest(command, Command.LoadScore, LoadScoreResponse);\n  }\n\n  ConstructCommandResponse(instance, message) {\n    switch (instance.constructor) {\n      case EnumerateMidiDevicesResponse:\n        return EnumerateMidiDevicesResponse.FromMessagePack(message);\n\n      case SelectMidiDevicesResponse:\n        return SelectMidiDevicesResponse.FromMessagePack(message);\n\n      case EnumerateScoresResponse:\n        return EnumerateScoresResponse.FromMessagePack(message);\n\n      case LoadScoreResponse:\n        return LoadScoreResponse.FromMessagePack(message);\n\n      default:\n        console.error(\"Unable to construct command response for (instance, message):\", instance, message);\n        break;\n    }\n  }\n\n  async SendRequest(requestCommand, command, ResponseType) {\n    await this.connectCheck();\n    var self = this;\n    return new _Promise((resolve, reject) => {\n      async function onResponse(event) {\n        const buffer = await new Response(event.data).arrayBuffer();\n        var message = msgpack.deserialize(buffer);\n\n        if (message.Command !== command && message.Kind !== RequestResponse.Response) {\n          return;\n        }\n\n        self.client.Socket.removeEventListener(\"message\", onResponse);\n        resolve(self.ConstructCommandResponse(new ResponseType(), message));\n      }\n\n      this.client.Socket.addEventListener(\"message\", onResponse);\n      console.log(\"[Socket -> Peer] Sending:\", requestCommand);\n      this.client.Socket.send(msgpack.serialize(requestCommand));\n    });\n  }\n\n}\n\n_defineProperty(SightReaderClient, \"instance\", new SightReaderClient());","map":null,"metadata":{},"sourceType":"module"}