{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Box, Paper, InputBase } from \"@material-ui/core\";\nimport { SightReaderClient } from \"./SightReaderClient\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconButton from \"@material-ui/core/IconButton\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    paperTableContainer: {\n      marginTop: theme.spacing(3),\n      width: \"100%\",\n      overflowX: \"auto\",\n      marginBottom: theme.spacing(2),\n      background: theme.palette.primary.light\n    },\n    tableCell: {\n      cursor: \"pointer\"\n    },\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: 400,\n      background: theme.palette.primary.light\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    },\n    activeScoreSection: {\n      marginBottom: theme.spacing(2)\n    }\n  });\n});\nexport default function ScoresPane() {\n  var classes = useStyles();\n\n  var _useState = useState(\"\"),\n      scoreFilter = _useState[0],\n      setScoreFilter = _useState[1];\n\n  var _useState2 = useState([]),\n      scores = _useState2[0],\n      setScores = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      activeScore = _useState3[0],\n      setActiveScore = _useState3[1];\n\n  useEffect(function () {\n    SightReaderClient.Instance.EnumerateScores().then(function (result) {\n      setScores(result.FilePaths);\n      setActiveScore(result.ActiveScoreFilePath);\n    });\n  }, []);\n\n  var onSelectScore = function onSelectScore(scoreFilePath) {\n    SightReaderClient.Instance.LoadScore(scoreFilePath).then(function (result) {\n      SightReaderClient.Instance.setScore(result.Score);\n      setActiveScore(result.ActiveScoreFilePath);\n    });\n  };\n\n  var filteredScores = scores.filter(function (x) {\n    return x.substring(x.lastIndexOf(\"\\\\\") + 1).toLowerCase().includes(scoreFilter.toLowerCase());\n  });\n  return __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, \"Scores\"), __jsx(Box, {\n    className: classes.activeScoreSection\n  }, activeScore.length > 0 && __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true\n  }, __jsx(\"strong\", null, \"Playing:\"), \" \", activeScore.substring(activeScore.lastIndexOf(\"\\\\\") + 1))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }, __jsx(Paper, {\n    className: classes.root\n  }, __jsx(InputBase, {\n    className: classes.input,\n    placeholder: \"Filter scores...\",\n    onChange: function onChange(_ref) {\n      var target = _ref.target;\n      return setScoreFilter(target.value ? target.value : \"\");\n    }\n  }), __jsx(IconButton, {\n    className: classes.iconButton,\n    \"aria-label\": \"search\"\n  }, __jsx(SearchIcon, null))), __jsx(Paper, {\n    className: classes.paperTableContainer\n  }, __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableBody, null, filteredScores.length > 0 && filteredScores.map(function (score) {\n    return __jsx(TableRow, {\n      key: score\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      className: classes.tableCell,\n      onClick: function onClick() {\n        return onSelectScore(score);\n      }\n    }, score.substring(score.lastIndexOf(\"\\\\\") + 1)));\n  }), filteredScores.length === 0 && __jsx(TableRow, null, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\"\n  }, scoreFilter.length > 0 ? \"0 results for '\".concat(scoreFilter, \"' (\").concat(scores.length, \" total scores).\") : \"Loading...\")))))));\n}","map":null,"metadata":{},"sourceType":"module"}