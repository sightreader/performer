{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\sightreader\\\\performer\\\\src\\\\MidiDevicesPane.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Box, Paper, FormGroup, FormControlLabel, Switch } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { SightReaderClient } from \"./SightReaderClient\";\nimport { EnumerateMidiDevicesResponse } from \"./Client/Commands/Command\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    containerRoot: {\n      padding: theme.spacing(1)\n    },\n    containerIo: {\n      padding: theme.spacing(3, 2),\n      background: theme.palette.primary.light,\n      flexGrow: 1,\n      marginRight: theme.spacing(1),\n      marginLeft: theme.spacing(1),\n      marginTop: theme.spacing(1)\n    },\n    containerInput: {\n      padding: theme.spacing(3, 2)\n    },\n    containerOutput: {\n      padding: theme.spacing(3, 2)\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    margin: {\n      margin: theme.spacing(1)\n    }\n  };\n});\nexport default function MidiDevicesPane() {\n  var classes = useStyles();\n\n  var _useState = useState(new EnumerateMidiDevicesResponse()),\n      midiDevices = _useState[0],\n      setMidiDevices = _useState[1];\n\n  useEffect(function () {\n    SightReaderClient.Instance.EnumerateMidiDevices().then(function (midiDevices) {\n      setMidiDevices(midiDevices);\n    });\n  }, []);\n\n  var onInputDeviceChecked = function onInputDeviceChecked(toggledDeviceName) {\n    SightReaderClient.Instance.SelectMidiDevices([toggledDeviceName], []).then(function (midiDevices) {\n      setMidiDevices(midiDevices);\n    });\n  };\n\n  var onOutputDeviceChecked = function onOutputDeviceChecked(toggledDeviceName) {\n    SightReaderClient.Instance.SelectMidiDevices([], [toggledDeviceName]).then(function (midiDevices) {\n      setMidiDevices(midiDevices);\n    });\n  };\n\n  return __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"MIDI Devices\"), __jsx(Typography, {\n    variant: \"subtitle1\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Changes made on this page apply instantly.\"), __jsx(Box, {\n    display: \"flex\",\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: clsx(classes.containerIo, classes.containerOutput),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    component: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Inputs\"), __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, midiDevices.InputDeviceNames.map(function (deviceName, index) {\n    return __jsx(FormControlLabel, {\n      key: deviceName,\n      control: __jsx(Switch, {\n        checked: !!midiDevices.EnabledInputDeviceNames[index],\n        onChange: function onChange() {\n          return onInputDeviceChecked(deviceName);\n        },\n        value: deviceName,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }),\n      label: deviceName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }))), __jsx(Paper, {\n    className: clsx(classes.containerIo, classes.containerOutput),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    component: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Outputs\"), __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, midiDevices.OutputDeviceNames.map(function (deviceName, index) {\n    return __jsx(FormControlLabel, {\n      key: deviceName,\n      control: __jsx(Switch, {\n        checked: !!midiDevices.EnabledOutputDeviceNames[index],\n        onChange: function onChange() {\n          return onOutputDeviceChecked(deviceName);\n        },\n        value: deviceName,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }),\n      label: deviceName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  })))));\n}","map":{"version":3,"sources":["C:/code/sightreader/performer/src/MidiDevicesPane.tsx"],"names":["React","useState","useEffect","makeStyles","Typography","Box","Paper","FormGroup","FormControlLabel","Switch","clsx","SightReaderClient","EnumerateMidiDevicesResponse","useStyles","theme","containerRoot","padding","spacing","containerIo","background","palette","primary","light","flexGrow","marginRight","marginLeft","marginTop","containerInput","containerOutput","menuButton","title","margin","MidiDevicesPane","classes","midiDevices","setMidiDevices","Instance","EnumerateMidiDevices","then","onInputDeviceChecked","toggledDeviceName","SelectMidiDevices","onOutputDeviceChecked","InputDeviceNames","map","deviceName","index","EnabledInputDeviceNames","OutputDeviceNames","EnabledOutputDeviceNames"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAQA,OAAOC,UAAP,MAAuB,8BAAvB;AAGA,SAEEC,GAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,gBALF,EAMEC,MANF,QAOO,mBAPP;AAWA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AAEA,IAAMC,SAAS,GAAGV,UAAU,CAAC,UAAAW,KAAK;AAAA,SAAK;AACrCC,IAAAA,aAAa,EAAE;AACbC,MAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADI,KADsB;AAIrCC,IAAAA,WAAW,EAAE;AACXF,MAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB,CADE;AAEXE,MAAAA,UAAU,EAAEL,KAAK,CAACM,OAAN,CAAcC,OAAd,CAAsBC,KAFvB;AAGXC,MAAAA,QAAQ,EAAE,CAHC;AAIXC,MAAAA,WAAW,EAAEV,KAAK,CAACG,OAAN,CAAc,CAAd,CAJF;AAKXQ,MAAAA,UAAU,EAAEX,KAAK,CAACG,OAAN,CAAc,CAAd,CALD;AAMXS,MAAAA,SAAS,EAAEZ,KAAK,CAACG,OAAN,CAAc,CAAd;AANA,KAJwB;AAYrCU,IAAAA,cAAc,EAAE;AACdX,MAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB;AADK,KAZqB;AAerCW,IAAAA,eAAe,EAAE;AACfZ,MAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB;AADM,KAfoB;AAkBrCY,IAAAA,UAAU,EAAE;AACVL,MAAAA,WAAW,EAAEV,KAAK,CAACG,OAAN,CAAc,CAAd;AADH,KAlByB;AAqBrCa,IAAAA,KAAK,EAAE;AACLP,MAAAA,QAAQ,EAAE;AADL,KArB8B;AAwBrCQ,IAAAA,MAAM,EAAE;AACNA,MAAAA,MAAM,EAAEjB,KAAK,CAACG,OAAN,CAAc,CAAd;AADF;AAxB6B,GAAL;AAAA,CAAN,CAA5B;AA6BA,eAAe,SAASe,eAAT,GAA2B;AACxC,MAAMC,OAAO,GAAGpB,SAAS,EAAzB;;AADwC,kBAEFZ,QAAQ,CAC5C,IAAIW,4BAAJ,EAD4C,CAFN;AAAA,MAEjCsB,WAFiC;AAAA,MAEpBC,cAFoB;;AAMxCjC,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,iBAAiB,CAACyB,QAAlB,CAA2BC,oBAA3B,GAAkDC,IAAlD,CAAuD,UAAAJ,WAAW,EAAI;AACpEC,MAAAA,cAAc,CAACD,WAAD,CAAd;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,iBAAD,EAA4B;AACvD7B,IAAAA,iBAAiB,CAACyB,QAAlB,CAA2BK,iBAA3B,CAA6C,CAACD,iBAAD,CAA7C,EAAkE,EAAlE,EAAsEF,IAAtE,CACE,UAAAJ,WAAW,EAAI;AACbC,MAAAA,cAAc,CAACD,WAAD,CAAd;AACD,KAHH;AAKD,GAND;;AAQA,MAAMQ,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,iBAAD,EAA4B;AACxD7B,IAAAA,iBAAiB,CAACyB,QAAlB,CAA2BK,iBAA3B,CAA6C,EAA7C,EAAiD,CAACD,iBAAD,CAAjD,EAAsEF,IAAtE,CACE,UAAAJ,WAAW,EAAI;AACbC,MAAAA,cAAc,CAACD,WAAD,CAAd;AACD,KAHH;AAKD,GAND;;AAQA,SACE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,aAAa,EAAC,QAAlC;AAA2C,IAAA,MAAM,EAAC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,YAAY,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAIE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAgC,IAAA,YAAY,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAJF,EAOE,MAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAoB,IAAA,KAAK,EAAC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAExB,IAAI,CAACuB,OAAO,CAACf,WAAT,EAAsBe,OAAO,CAACL,eAA9B,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,WAAW,CAACS,gBAAZ,CAA6BC,GAA7B,CAAiC,UAACC,UAAD,EAAaC,KAAb;AAAA,WAChC,MAAC,gBAAD;AACE,MAAA,GAAG,EAAED,UADP;AAEE,MAAA,OAAO,EACL,MAAC,MAAD;AACE,QAAA,OAAO,EAAE,CAAC,CAACX,WAAW,CAACa,uBAAZ,CAAoCD,KAApC,CADb;AAEE,QAAA,QAAQ,EAAE;AAAA,iBAAMP,oBAAoB,CAACM,UAAD,CAA1B;AAAA,SAFZ;AAGE,QAAA,KAAK,EAAEA,UAHT;AAIE,QAAA,KAAK,EAAC,WAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ;AAUE,MAAA,KAAK,EAAEA,UAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADgC;AAAA,GAAjC,CADH,CAJF,CADF,EAsBE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEnC,IAAI,CAACuB,OAAO,CAACf,WAAT,EAAsBe,OAAO,CAACL,eAA9B,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,WAAW,CAACc,iBAAZ,CAA8BJ,GAA9B,CAAkC,UAACC,UAAD,EAAaC,KAAb;AAAA,WACjC,MAAC,gBAAD;AACE,MAAA,GAAG,EAAED,UADP;AAEE,MAAA,OAAO,EACL,MAAC,MAAD;AACE,QAAA,OAAO,EAAE,CAAC,CAACX,WAAW,CAACe,wBAAZ,CAAqCH,KAArC,CADb;AAEE,QAAA,QAAQ,EAAE;AAAA,iBAAMJ,qBAAqB,CAACG,UAAD,CAA3B;AAAA,SAFZ;AAGE,QAAA,KAAK,EAAEA,UAHT;AAIE,QAAA,KAAK,EAAC,WAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ;AAUE,MAAA,KAAK,EAAEA,UAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADiC;AAAA,GAAlC,CADH,CAJF,CAtBF,CAPF,CADF;AAsDD","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Client } from \"../src/Client/Client\";\r\nimport SettingsInputSvideoTwoToneIcon from \"@material-ui/icons/SettingsInputSvideoTwoTone\";\r\nimport {\r\n  Fab,\r\n  Box,\r\n  Paper,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  Switch\r\n} from \"@material-ui/core\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MenuBookTwoToneIcon from \"@material-ui/icons/MenuBookTwoTone\";\r\nimport clsx from \"clsx\";\r\nimport { SightReaderClient } from \"./SightReaderClient\";\r\nimport { EnumerateMidiDevicesResponse } from \"./Client/Commands/Command\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  containerRoot: {\r\n    padding: theme.spacing(1)\r\n  },\r\n  containerIo: {\r\n    padding: theme.spacing(3, 2),\r\n    background: theme.palette.primary.light,\r\n    flexGrow: 1,\r\n    marginRight: theme.spacing(1),\r\n    marginLeft: theme.spacing(1),\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  containerInput: {\r\n    padding: theme.spacing(3, 2)\r\n  },\r\n  containerOutput: {\r\n    padding: theme.spacing(3, 2)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nexport default function MidiDevicesPane() {\r\n  const classes = useStyles();\r\n  const [midiDevices, setMidiDevices] = useState(\r\n    new EnumerateMidiDevicesResponse()\r\n  );\r\n\r\n  useEffect(() => {\r\n    SightReaderClient.Instance.EnumerateMidiDevices().then(midiDevices => {\r\n      setMidiDevices(midiDevices);\r\n    });\r\n  }, []);\r\n\r\n  const onInputDeviceChecked = (toggledDeviceName: any) => {\r\n    SightReaderClient.Instance.SelectMidiDevices([toggledDeviceName], []).then(\r\n      midiDevices => {\r\n        setMidiDevices(midiDevices);\r\n      }\r\n    );\r\n  };\r\n\r\n  const onOutputDeviceChecked = (toggledDeviceName: any) => {\r\n    SightReaderClient.Instance.SelectMidiDevices([], [toggledDeviceName]).then(\r\n      midiDevices => {\r\n        setMidiDevices(midiDevices);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        MIDI Devices\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom>\r\n        Changes made on this page apply instantly.\r\n      </Typography>\r\n      <Box display=\"flex\" width=\"100%\">\r\n        <Paper className={clsx(classes.containerIo, classes.containerOutput)}>\r\n          <Typography variant=\"h6\" component=\"h3\">\r\n            Inputs\r\n          </Typography>\r\n          <FormGroup>\r\n            {midiDevices.InputDeviceNames.map((deviceName, index) => (\r\n              <FormControlLabel\r\n                key={deviceName}\r\n                control={\r\n                  <Switch\r\n                    checked={!!midiDevices.EnabledInputDeviceNames[index]}\r\n                    onChange={() => onInputDeviceChecked(deviceName)}\r\n                    value={deviceName}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={deviceName}\r\n              />\r\n            ))}\r\n          </FormGroup>\r\n        </Paper>\r\n        <Paper className={clsx(classes.containerIo, classes.containerOutput)}>\r\n          <Typography variant=\"h6\" component=\"h3\">\r\n            Outputs\r\n          </Typography>\r\n          <FormGroup>\r\n            {midiDevices.OutputDeviceNames.map((deviceName, index) => (\r\n              <FormControlLabel\r\n                key={deviceName}\r\n                control={\r\n                  <Switch\r\n                    checked={!!midiDevices.EnabledOutputDeviceNames[index]}\r\n                    onChange={() => onOutputDeviceChecked(deviceName)}\r\n                    value={deviceName}\r\n                    color=\"secondary\"\r\n                  />\r\n                }\r\n                label={deviceName}\r\n              />\r\n            ))}\r\n          </FormGroup>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}