{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Box, Paper, InputBase } from \"@material-ui/core\";\nimport { SightReaderClient } from \"./SightReaderClient\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconButton from \"@material-ui/core/IconButton\";\nconst useStyles = makeStyles(theme => createStyles({\n  paperTableContainer: {\n    marginTop: theme.spacing(3),\n    width: \"100%\",\n    overflowX: \"auto\",\n    marginBottom: theme.spacing(2),\n    background: theme.palette.primary.light\n  },\n  tableCell: {\n    cursor: \"pointer\"\n  },\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 400,\n    background: theme.palette.primary.light\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  activeScoreSection: {\n    marginBottom: theme.spacing(2)\n  }\n}));\nexport default function ScoresPane() {\n  const classes = useStyles();\n  const {\n    0: scoreFilter,\n    1: setScoreFilter\n  } = useState(\"\");\n  const {\n    0: scores,\n    1: setScores\n  } = useState([]);\n  const {\n    0: activeScore,\n    1: setActiveScore\n  } = useState(\"\");\n  useEffect(() => {\n    SightReaderClient.Instance.EnumerateScores().then(result => {\n      setScores(result.FilePaths);\n      setActiveScore(result.ActiveScoreFilePath);\n    });\n  }, []);\n\n  const onSelectScore = scoreFilePath => {\n    SightReaderClient.Instance.LoadScore(scoreFilePath).then(result => {\n      SightReaderClient.Instance.setScore(result.Score);\n      setActiveScore(result.ActiveScoreFilePath);\n    });\n  };\n\n  const filteredScores = scores.filter(x => x.substring(x.lastIndexOf(\"\\\\\") + 1).toLowerCase().includes(scoreFilter.toLowerCase()));\n  return __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true\n  }, \"Scores\"), __jsx(Box, {\n    className: classes.activeScoreSection\n  }, activeScore.length > 0 && __jsx(Typography, {\n    variant: \"body1\",\n    gutterBottom: true\n  }, __jsx(\"strong\", null, \"Playing:\"), \" \", activeScore.substring(activeScore.lastIndexOf(\"\\\\\") + 1))), __jsx(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }, __jsx(Paper, {\n    className: classes.root\n  }, __jsx(InputBase, {\n    className: classes.input,\n    placeholder: \"Filter scores...\",\n    onChange: ({\n      target\n    }) => setScoreFilter(target.value ? target.value : \"\")\n  }), __jsx(IconButton, {\n    className: classes.iconButton,\n    \"aria-label\": \"search\"\n  }, __jsx(SearchIcon, null))), __jsx(Paper, {\n    className: classes.paperTableContainer\n  }, __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableBody, null, filteredScores.length > 0 && filteredScores.map(score => __jsx(TableRow, {\n    key: score\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    className: classes.tableCell,\n    onClick: () => onSelectScore(score)\n  }, score.substring(score.lastIndexOf(\"\\\\\") + 1)))), filteredScores.length === 0 && __jsx(TableRow, null, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\"\n  }, scoreFilter.length > 0 ? `0 results for '${scoreFilter}' (${scores.length} total scores).` : \"Loading...\")))))));\n}","map":null,"metadata":{},"sourceType":"module"}