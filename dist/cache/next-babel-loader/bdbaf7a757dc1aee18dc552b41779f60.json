{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nimport MenuBookTwoToneIcon from \"@material-ui/icons/MenuBookTwoTone\";\nimport { SightReaderClient } from \"./SightReaderClient\";\nconst useStyles = makeStyles(theme => createStyles({\n  paperTableContainer: {\n    marginTop: theme.spacing(3),\n    width: \"100%\",\n    overflowX: \"auto\",\n    marginBottom: theme.spacing(2),\n    background: theme.palette.primary.light\n  },\n  tableCell: {\n    cursor: \"pointer\"\n  },\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 400,\n    background: theme.palette.primary.light\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  activeScoreSection: {\n    marginBottom: theme.spacing(2)\n  },\n  stage: {\n    width: \"100%\",\n    height: \"100%\",\n    padding: 10,\n    paddingLeft: 5\n  },\n  noScoreLoadedIcon: {\n    color: theme.palette.primary.dark,\n    width: \"23vw\",\n    height: \"auto\",\n    transform: \"translateY(-10%)\",\n    opacity: 0.3\n  }\n}));\nexport default function ScorePane() {\n  const classes = useStyles();\n  const stageRef = useRef(null);\n  const {\n    0: pageSvg,\n    1: setPageSvg\n  } = useState(\"\");\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(1);\n  const measureHighlightTrebleRef = useRef(null);\n  const measureHighlightBassRef = useRef(null);\n  const {\n    0: measureNumbers,\n    1: setMeasureNumbers\n  } = useState([1, 1]);\n  const {\n    0: bassMeasureHighlightDetails,\n    1: setTrebleMeasureHighlightDetails\n  } = useState({\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0\n  });\n  const {\n    0: trebleMeasureHighlightDetails,\n    1: setBassMeasureHighlightDetails\n  } = useState({\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    highlightMeasure(1, measureNumbers[0]);\n    highlightMeasure(2, measureNumbers[0]);\n  }, [measureNumbers]);\n  useEffect(() => {\n    if (SightReaderClient.Instance.Score.length === 0 || !stageRef || !stageRef.current) {\n      return;\n    }\n\n    var stageBounds = stageRef.current.getBoundingClientRect();\n    SightReaderClient.Instance.setupScore({\n      pageHeight: stageBounds.height * window.devicePixelRatio,\n      pageWidth: stageBounds.width * 3,\n      scale: 100\n      /* Scale 100 means pageHeight and pageWidth are pixel units: https://github.com/rism-ch/verovio/issues/1055 */\n      ,\n      adjustPageHeight: false\n    }).then(() => {\n      return rerenderScore(pageNumber);\n    }).then(() => {\n      highlightMeasure(1, measureNumbers[0]);\n      highlightMeasure(2, measureNumbers[0]);\n    });\n  }, [SightReaderClient.Instance.Score]);\n\n  async function rerenderScore(page) {\n    setPageNumber(page);\n    console.log(\"Rendering Page:\", page);\n    return SightReaderClient.Instance.renderScore(page).then(svg => {\n      setPageSvg(svg);\n    });\n  }\n\n  if (false) {\n    window.rerenderScore = rerenderScore;\n  }\n\n  useEffect(() => {\n    rerenderScore(pageNumber);\n    window.pageNumber = pageNumber;\n  }, [pageNumber]);\n\n  if (false) {\n    window.pageNumber = pageNumber;\n  }\n\n  SightReaderClient.Instance.setSetScoreDisplayPositionRequestedCallback(onSetScoreDisplayPositionRequested);\n\n  function onSetScoreDisplayPositionRequested(command) {\n    console.log(\"Received final set score display position request:\", command.MeasureNumbers, command.GroupIndices);\n    var highestPlayedMeasure = Math.max(...command.MeasureNumbers);\n    var measureRange = getPageMeasureRange();\n    var [lowestMeasureDisplayed, highestMeasureDisplayed] = measureRange;\n\n    if (highestPlayedMeasure < lowestMeasureDisplayed) {\n      setPageNumber(Math.max(0, pageNumber - 1));\n    } else if (highestPlayedMeasure > highestMeasureDisplayed) {\n      setPageNumber(pageNumber + 1);\n    } else {\n      highlightMeasure(1, command.MeasureNumbers[0]);\n      highlightMeasure(2, command.MeasureNumbers[1]);\n    }\n  }\n\n  function getPageMeasureRange() {\n    const navigableMeasureNumberEl = document.querySelector(\".mNum\");\n\n    if (!navigableMeasureNumberEl) {\n      console.error(\"Cannot highlight measure because no measure numbers are present on any system on the page.\");\n      return [-1, -1];\n    }\n\n    const navigableMeasureNumber = navigableMeasureNumberEl.textContent ? +navigableMeasureNumberEl.textContent.trim() : -1;\n\n    if (navigableMeasureNumber === -1) {\n      console.error(\"Found measure number element .mNum, but it has no text content so cannot extract measure number.\");\n      return [-1, -1];\n    }\n\n    const navigableMeasureEl = navigableMeasureNumberEl.closest(\".measure\");\n    const pageMeasures = document.querySelectorAll(\".measure\");\n    const navigableMeasureNumberElIndex = -1;\n    let measureRangeLow = 0;\n    let measureRangeHigh = 0;\n    let measuresBeforeNavigable = 0;\n    let measuresAfterNavigable = 0;\n    let foundTargetMeasureEl = false;\n    pageMeasures.forEach(measureEl => {\n      if (foundTargetMeasureEl) {\n        return;\n      }\n\n      if (measureEl === navigableMeasureEl) {\n        measuresAfterNavigable = pageMeasures.length - measuresBeforeNavigable - 1;\n        foundTargetMeasureEl = true;\n      } else {\n        measuresBeforeNavigable += 1;\n      }\n    });\n    measureRangeLow = navigableMeasureNumber - measuresBeforeNavigable;\n    measureRangeHigh = navigableMeasureNumber + measuresAfterNavigable;\n    return [measureRangeLow, measureRangeHigh];\n  }\n\n  if (false) {\n    window.getPageMeasureRange = getPageMeasureRange;\n  }\n\n  function highlightMeasure(staff, targetMeasureNum) {\n    if (SightReaderClient.Instance.Score.length === 0) {\n      return;\n    }\n\n    const [measureRangeLow, measureRangeHigh] = getPageMeasureRange();\n\n    if (targetMeasureNum < measureRangeLow || targetMeasureNum > measureRangeHigh) {\n      console.error(`Cannot highlight measure ${targetMeasureNum}. This page only shows measures ${measureRangeLow} - ${measureRangeHigh}.`);\n    }\n\n    const relativeMeasureNum = targetMeasureNum - measureRangeLow;\n    const measureEls = document.querySelectorAll(`.measure`);\n    const measureEl = measureEls[relativeMeasureNum];\n\n    if (!measureEl) {\n      return;\n    }\n\n    const staffEl = measureEl.querySelectorAll(\".staff\")[staff - 1];\n\n    if (!staffEl) {\n      console.error(\"Could not highlight staff\", staff, \"of measure\", targetMeasureNum, \". The measure element was:\", measureEl);\n      return;\n    }\n\n    const staffBoundingBox = staffEl.getBoundingClientRect();\n\n    if (staff === 1) {\n      setTrebleMeasureHighlightDetails({\n        top: staffBoundingBox.top,\n        left: staffBoundingBox.left,\n        width: staffBoundingBox.width,\n        height: staffBoundingBox.height\n      });\n    } else if (staff === 2) {\n      setBassMeasureHighlightDetails({\n        top: staffBoundingBox.top,\n        left: staffBoundingBox.left,\n        width: staffBoundingBox.width,\n        height: staffBoundingBox.height\n      });\n    } else {\n      console.error(\"Unknown staff\", staff, \"to highlight measure for.\");\n    }\n  }\n\n  if (false) {\n    window.highlightMeasure = highlightMeasure;\n  }\n\n  return __jsx(Box, {\n    flexGrow: 1,\n    flexShrink: 0,\n    maxWidth: 1024\n  }, pageSvg.length === 0 && __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100%\"\n  }, __jsx(MenuBookTwoToneIcon, {\n    className: classes.noScoreLoadedIcon\n  })), __jsx(_JSXStyle, {\n    id: \"918444649\"\n  }, [\"#stage .system>polygon{display:none;}\", \"#stage .rest{display:none;}\"]), __jsx(\"div\", {\n    id: \"measure-highlight-staff-treble\",\n    ref: measureHighlightTrebleRef,\n    style: {\n      position: \"absolute\",\n      width: trebleMeasureHighlightDetails.width,\n      height: trebleMeasureHighlightDetails.height,\n      top: trebleMeasureHighlightDetails.top,\n      left: trebleMeasureHighlightDetails.left,\n      background: \"#457c97\",\n      opacity: 0.25,\n      borderRadius: 0,\n      boxShadow: `0 0 0 1px #d4d4d5, 0 2px 4px 0 rgba(34,36,38,.12), 0 2px 10px 0 rgba(34,36,38,.15)`\n    },\n    className: \"jsx-918444649\"\n  }), __jsx(\"div\", {\n    id: \"measure-highlight-staff-bass\",\n    ref: measureHighlightBassRef,\n    style: {\n      position: \"absolute\",\n      width: bassMeasureHighlightDetails.width,\n      height: bassMeasureHighlightDetails.height,\n      top: bassMeasureHighlightDetails.top,\n      left: bassMeasureHighlightDetails.left,\n      background: \"#457c97\",\n      opacity: 0.25,\n      borderRadius: 0,\n      boxShadow: `0 0 0 1px #d4d4d5, 0 2px 4px 0 rgba(34,36,38,.12), 0 2px 10px 0 rgba(34,36,38,.15)`\n    },\n    className: \"jsx-918444649\"\n  }), __jsx(\"div\", {\n    id: \"stage\",\n    ref: stageRef,\n    dangerouslySetInnerHTML: {\n      __html: pageSvg\n    },\n    className: \"jsx-918444649\" + \" \" + (classes.stage || \"\")\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}