{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport { Client } from \"./Client/Client\";\nimport msgpack from \"@ygoe/msgpack\";\nimport { EnumerateMidiDevicesRequest, EnumerateMidiDevicesResponse, Command, RequestResponse, SelectMidiDevicesResponse, SelectMidiDevicesRequest, EnumerateScoresResponse, EnumerateScoresRequest, LoadScoreResponse, LoadScoreRequest, SetScoreDisplayPositionRequest } from \"./Client/Commands/Command\";\nexport class SightReaderClient {\n  constructor() {\n    _defineProperty(this, \"verovio\", void 0);\n\n    _defineProperty(this, \"client\", new Client());\n\n    _defineProperty(this, \"score\", \"\");\n\n    _defineProperty(this, \"onSetScoreDisplayPositionRequested\", () => {});\n  }\n\n  static get Instance() {\n    return SightReaderClient.instance;\n  }\n\n  async setSetScoreDisplayPositionRequestedCallback(onSetScoreDisplayPositionRequested) {\n    this.onSetScoreDisplayPositionRequested = onSetScoreDisplayPositionRequested;\n  }\n\n  async getVerovio() {\n    return new _Promise((resolve, reject) => {\n      if (!this.verovio) {\n        this.verovio = new window.verovio.toolkit();\n      }\n\n      resolve(this.verovio);\n    });\n  }\n\n  async setupScore(verovioOptions) {\n    return this.getVerovio().then(verovio => {\n      var options = _objectSpread({\n        font: \"Bravura\",\n        slurThickness: 0.3,\n        spacingNonLinear: 0.7,\n        stemWidth: 0.3,\n        svgViewBox: true,\n        noHeader: true,\n        noFooter: true,\n        svgBoundingBoxes: false,\n        breaks: \"auto\",\n        pageMarginBottom: 0,\n        pageMarginLeft: 10,\n        pageMarginRight: 0,\n        pageMarginTop: 0,\n        scale: 1000\n      }, verovioOptions);\n\n      console.log(\"Setting up Verovio with options:\", options);\n      this.verovio.setOptions(options);\n      verovio.loadData(this.score);\n    });\n  }\n\n  async renderScore(pageNumber) {\n    return new _Promise((resolve, reject) => {\n      return this.getVerovio().then(verovio => {\n        console.log(\"verovio.rendertsvg:\", verovio);\n        window.verovio3 = verovio;\n        resolve(verovio.renderToSVG(pageNumber));\n      });\n    });\n  }\n\n  get Score() {\n    return this.score;\n  }\n\n  setScore(score) {\n    this.score = new TextDecoder(\"utf-8\").decode(score);\n  }\n\n  async connectCheck() {\n    if (!this.client.Socket || this.client.Socket.readyState !== this.client.Socket.OPEN) {\n      await this.client.connect();\n      this.addMessageHandlerForSetScoreDisplayPosition();\n    }\n  }\n\n  addMessageHandlerForSetScoreDisplayPosition() {\n    var self = this;\n\n    async function onResponse(event) {\n      const buffer = await new Response(event.data).arrayBuffer();\n      var message = msgpack.deserialize(buffer);\n\n      if (message.Command !== Command.SetScoreDisplayPosition && message.Kind !== RequestResponse.Request) {\n        return;\n      }\n\n      if (typeof self.onSetScoreDisplayPositionRequested === \"function\") {\n        var command = SetScoreDisplayPositionRequest.FromMessagePack(message);\n        self.onSetScoreDisplayPositionRequested(command);\n      }\n    }\n\n    console.log(\"Adding message handler for set score display position...\");\n    this.client.Socket.addEventListener(\"message\", onResponse);\n  }\n\n  async EnumerateMidiDevices() {\n    return this.SendRequest(new EnumerateMidiDevicesRequest(), Command.SelectMidiDevices, EnumerateMidiDevicesResponse);\n  }\n\n  async SelectMidiDevices(inputDeviceNames, outputDeviceNames) {\n    return this.SendRequest(new SelectMidiDevicesRequest({\n      InputDeviceNames: inputDeviceNames,\n      OutputDeviceNames: outputDeviceNames\n    }), Command.SelectMidiDevices, SelectMidiDevicesResponse);\n  }\n\n  async EnumerateScores() {\n    return this.SendRequest(new EnumerateScoresRequest(), Command.EnumerateScores, EnumerateScoresResponse);\n  }\n\n  async LoadScore(scoreFilePath) {\n    var command = new LoadScoreRequest();\n    command.FilePath = scoreFilePath;\n    return this.SendRequest(command, Command.LoadScore, LoadScoreResponse);\n  }\n\n  ConstructCommandResponse(instance, message) {\n    switch (instance.constructor) {\n      case EnumerateMidiDevicesResponse:\n        return EnumerateMidiDevicesResponse.FromMessagePack(message);\n\n      case SelectMidiDevicesResponse:\n        return SelectMidiDevicesResponse.FromMessagePack(message);\n\n      case EnumerateScoresResponse:\n        return EnumerateScoresResponse.FromMessagePack(message);\n\n      case LoadScoreResponse:\n        return LoadScoreResponse.FromMessagePack(message);\n\n      default:\n        console.error(\"Unable to construct command response for (instance, message):\", instance, message);\n        break;\n    }\n  }\n\n  async SendRequest(requestCommand, command, ResponseType) {\n    await this.connectCheck();\n    var self = this;\n    return new _Promise((resolve, reject) => {\n      async function onResponse(event) {\n        const buffer = await new Response(event.data).arrayBuffer();\n        var message = msgpack.deserialize(buffer);\n\n        if (message.Command !== command && message.Kind !== RequestResponse.Response) {\n          return;\n        }\n\n        self.client.Socket.removeEventListener(\"message\", onResponse);\n        resolve(self.ConstructCommandResponse(new ResponseType(), message));\n      }\n\n      this.client.Socket.addEventListener(\"message\", onResponse);\n      console.log(\"[Socket -> Peer] Sending:\", requestCommand);\n      this.client.Socket.send(msgpack.serialize(requestCommand));\n    });\n  }\n\n}\n\n_defineProperty(SightReaderClient, \"instance\", new SightReaderClient());","map":{"version":3,"sources":["C:/code/sightreader/performer/src/SightReaderClient.ts"],"names":["Client","msgpack","EnumerateMidiDevicesRequest","EnumerateMidiDevicesResponse","Command","RequestResponse","SelectMidiDevicesResponse","SelectMidiDevicesRequest","EnumerateScoresResponse","EnumerateScoresRequest","LoadScoreResponse","LoadScoreRequest","SetScoreDisplayPositionRequest","SightReaderClient","Instance","instance","setSetScoreDisplayPositionRequestedCallback","onSetScoreDisplayPositionRequested","getVerovio","resolve","reject","verovio","window","toolkit","setupScore","verovioOptions","then","options","font","slurThickness","spacingNonLinear","stemWidth","svgViewBox","noHeader","noFooter","svgBoundingBoxes","breaks","pageMarginBottom","pageMarginLeft","pageMarginRight","pageMarginTop","scale","console","log","setOptions","loadData","score","renderScore","pageNumber","verovio3","renderToSVG","Score","setScore","TextDecoder","decode","connectCheck","client","Socket","readyState","OPEN","connect","addMessageHandlerForSetScoreDisplayPosition","self","onResponse","event","buffer","Response","data","arrayBuffer","message","deserialize","SetScoreDisplayPosition","Kind","Request","command","FromMessagePack","addEventListener","EnumerateMidiDevices","SendRequest","SelectMidiDevices","inputDeviceNames","outputDeviceNames","InputDeviceNames","OutputDeviceNames","EnumerateScores","LoadScore","scoreFilePath","FilePath","ConstructCommandResponse","constructor","error","requestCommand","ResponseType","removeEventListener","send","serialize"],"mappings":"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","sourcesContent":["import { Client } from \"./Client/Client\";\r\nimport msgpack from \"@ygoe/msgpack\";\r\nimport {\r\n  EnumerateMidiDevicesRequest,\r\n  EnumerateMidiDevicesResponse,\r\n  Command,\r\n  RequestResponse,\r\n  SelectMidiDevicesResponse,\r\n  SelectMidiDevicesRequest,\r\n  EnumerateScoresResponse,\r\n  EnumerateScoresRequest,\r\n  LoadScoreResponse,\r\n  LoadScoreRequest,\r\n  SetScoreDisplayPositionRequest\r\n} from \"./Client/Commands/Command\";\r\n\r\nexport class SightReaderClient {\r\n  private verovio: any;\r\n  private client: Client = new Client();\r\n  private score: string = \"\";\r\n  private onSetScoreDisplayPositionRequested: Function = () => {};\r\n  private static instance: SightReaderClient = new SightReaderClient();\r\n\r\n  public static get Instance() {\r\n    return SightReaderClient.instance;\r\n  }\r\n\r\n  async setSetScoreDisplayPositionRequestedCallback(\r\n    onSetScoreDisplayPositionRequested: Function\r\n  ) {\r\n    this.onSetScoreDisplayPositionRequested = onSetScoreDisplayPositionRequested;\r\n  }\r\n\r\n  async getVerovio() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.verovio) {\r\n        this.verovio = new (window as any).verovio.toolkit();\r\n      }\r\n\r\n      resolve(this.verovio);\r\n    });\r\n  }\r\n\r\n  async setupScore(verovioOptions: any) {\r\n    return this.getVerovio().then((verovio: any) => {\r\n      var options = {\r\n        font: \"Bravura\",\r\n        slurThickness: 0.3,\r\n        spacingNonLinear: 0.7,\r\n        stemWidth: 0.3,\r\n        svgViewBox: true,\r\n        noHeader: true,\r\n        noFooter: true,\r\n        svgBoundingBoxes: false,\r\n        breaks: \"auto\",\r\n        pageMarginBottom: 0,\r\n        pageMarginLeft: 10,\r\n        pageMarginRight: 0,\r\n        pageMarginTop: 0,\r\n        scale: 1000,\r\n        ...verovioOptions\r\n      };\r\n      console.log(\"Setting up Verovio with options:\", options);\r\n      this.verovio.setOptions(options);\r\n      verovio.loadData(this.score);\r\n    });\r\n  }\r\n\r\n  async renderScore(pageNumber: number) {\r\n    return new Promise((resolve, reject) => {\r\n      return this.getVerovio().then((verovio: any) => {\r\n        console.log(\"verovio.rendertsvg:\", verovio);\r\n        (window as any).verovio3 = verovio;\r\n        resolve(verovio.renderToSVG(pageNumber));\r\n      });\r\n    });\r\n  }\r\n\r\n  get Score() {\r\n    return this.score;\r\n  }\r\n\r\n  setScore(score: Uint8Array) {\r\n    this.score = new TextDecoder(\"utf-8\").decode(score);\r\n  }\r\n\r\n  private async connectCheck() {\r\n    if (\r\n      !this.client.Socket ||\r\n      this.client.Socket.readyState !== this.client.Socket.OPEN\r\n    ) {\r\n      await this.client.connect();\r\n      this.addMessageHandlerForSetScoreDisplayPosition();\r\n    }\r\n  }\r\n\r\n  private addMessageHandlerForSetScoreDisplayPosition() {\r\n    var self = this;\r\n    async function onResponse(event: MessageEvent) {\r\n      const buffer = await new Response(event.data as Blob).arrayBuffer();\r\n      var message = msgpack.deserialize(buffer);\r\n\r\n      if (\r\n        message.Command !== Command.SetScoreDisplayPosition &&\r\n        message.Kind !== RequestResponse.Request\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (typeof self.onSetScoreDisplayPositionRequested === \"function\") {\r\n        var command = SetScoreDisplayPositionRequest.FromMessagePack(message);\r\n        self.onSetScoreDisplayPositionRequested(command);\r\n      }\r\n    }\r\n\r\n    console.log(\"Adding message handler for set score display position...\");\r\n    this.client.Socket.addEventListener(\"message\", onResponse);\r\n  }\r\n\r\n  async EnumerateMidiDevices(): Promise<EnumerateMidiDevicesResponse> {\r\n    return this.SendRequest(\r\n      new EnumerateMidiDevicesRequest(),\r\n      Command.SelectMidiDevices,\r\n      EnumerateMidiDevicesResponse\r\n    );\r\n  }\r\n\r\n  async SelectMidiDevices(\r\n    inputDeviceNames: string[],\r\n    outputDeviceNames: string[]\r\n  ): Promise<SelectMidiDevicesResponse> {\r\n    return this.SendRequest(\r\n      new SelectMidiDevicesRequest({\r\n        InputDeviceNames: inputDeviceNames,\r\n        OutputDeviceNames: outputDeviceNames\r\n      }),\r\n      Command.SelectMidiDevices,\r\n      SelectMidiDevicesResponse\r\n    );\r\n  }\r\n\r\n  async EnumerateScores(): Promise<EnumerateScoresResponse> {\r\n    return this.SendRequest(\r\n      new EnumerateScoresRequest(),\r\n      Command.EnumerateScores,\r\n      EnumerateScoresResponse\r\n    );\r\n  }\r\n\r\n  async LoadScore(scoreFilePath: string): Promise<LoadScoreResponse> {\r\n    var command = new LoadScoreRequest();\r\n    command.FilePath = scoreFilePath;\r\n\r\n    return this.SendRequest(command, Command.LoadScore, LoadScoreResponse);\r\n  }\r\n\r\n  private ConstructCommandResponse<T>(instance: T, message: any): any {\r\n    switch ((instance as any).constructor) {\r\n      case EnumerateMidiDevicesResponse:\r\n        return EnumerateMidiDevicesResponse.FromMessagePack(message);\r\n      case SelectMidiDevicesResponse:\r\n        return SelectMidiDevicesResponse.FromMessagePack(message);\r\n      case EnumerateScoresResponse:\r\n        return EnumerateScoresResponse.FromMessagePack(message);\r\n      case LoadScoreResponse:\r\n        return LoadScoreResponse.FromMessagePack(message);\r\n      default:\r\n        console.error(\r\n          \"Unable to construct command response for (instance, message):\",\r\n          instance,\r\n          message\r\n        );\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async SendRequest<TRequest, TResponse>(\r\n    requestCommand: any,\r\n    command: Command,\r\n    ResponseType: any\r\n  ): Promise<TResponse> {\r\n    await this.connectCheck();\r\n\r\n    var self = this;\r\n    return new Promise((resolve, reject) => {\r\n      async function onResponse(event: MessageEvent) {\r\n        const buffer = await new Response(event.data as Blob).arrayBuffer();\r\n        var message = msgpack.deserialize(buffer);\r\n\r\n        if (\r\n          message.Command !== command &&\r\n          message.Kind !== RequestResponse.Response\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        self.client.Socket.removeEventListener(\"message\", onResponse);\r\n        resolve(self.ConstructCommandResponse(new ResponseType(), message));\r\n      }\r\n\r\n      this.client.Socket.addEventListener(\"message\", onResponse);\r\n      console.log(\"[Socket -> Peer] Sending:\", requestCommand);\r\n      this.client.Socket.send(msgpack.serialize(requestCommand));\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}