{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Box } from \"@material-ui/core\";\nimport MenuBookTwoToneIcon from \"@material-ui/icons/MenuBookTwoTone\";\nimport { SightReaderClient } from \"./SightReaderClient\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    paperTableContainer: {\n      marginTop: theme.spacing(3),\n      width: \"100%\",\n      overflowX: \"auto\",\n      marginBottom: theme.spacing(2),\n      background: theme.palette.primary.light\n    },\n    tableCell: {\n      cursor: \"pointer\"\n    },\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: 400,\n      background: theme.palette.primary.light\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 28,\n      margin: 4\n    },\n    activeScoreSection: {\n      marginBottom: theme.spacing(2)\n    },\n    stage: {\n      width: \"100%\",\n      height: \"100%\",\n      padding: 10,\n      paddingLeft: 5\n    },\n    noScoreLoadedIcon: {\n      color: theme.palette.primary.dark,\n      width: \"23vw\",\n      height: \"auto\",\n      transform: \"translateY(-10%)\",\n      opacity: 0.3\n    }\n  });\n});\nexport default function ScorePane() {\n  var classes = useStyles();\n  var stageRef = useRef(null);\n\n  var _useState = useState(\"\"),\n      pageSvg = _useState[0],\n      setPageSvg = _useState[1];\n\n  var _useState2 = useState(1),\n      pageNumber = _useState2[0],\n      setPageNumber = _useState2[1];\n\n  var measureHighlightTrebleRef = useRef(null);\n  var measureHighlightBassRef = useRef(null);\n\n  var _useState3 = useState([1, 1]),\n      measureNumbers = _useState3[0],\n      setMeasureNumbers = _useState3[1];\n\n  var _useState4 = useState({\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0\n  }),\n      bassMeasureHighlightDetails = _useState4[0],\n      setTrebleMeasureHighlightDetails = _useState4[1];\n\n  var _useState5 = useState({\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0\n  }),\n      trebleMeasureHighlightDetails = _useState5[0],\n      setBassMeasureHighlightDetails = _useState5[1];\n\n  useEffect(function () {\n    highlightMeasure(1, measureNumbers[0]);\n    highlightMeasure(2, measureNumbers[0]);\n  }, [measureNumbers]);\n  useEffect(function () {\n    if (SightReaderClient.Instance.Score.length === 0 || !stageRef || !stageRef.current) {\n      return;\n    }\n\n    var stageBounds = stageRef.current.getBoundingClientRect();\n    SightReaderClient.Instance.setupScore({\n      pageHeight: stageBounds.height * window.devicePixelRatio,\n      pageWidth: stageBounds.width * 3,\n      scale: 100\n      /* Scale 100 means pageHeight and pageWidth are pixel units: https://github.com/rism-ch/verovio/issues/1055 */\n      ,\n      adjustPageHeight: false\n    }).then(function () {\n      return rerenderScore(pageNumber);\n    }).then(function () {\n      highlightMeasure(1, measureNumbers[0]);\n      highlightMeasure(2, measureNumbers[0]);\n    });\n  }, [SightReaderClient.Instance.Score]);\n\n  function rerenderScore(_x) {\n    return _rerenderScore.apply(this, arguments);\n  }\n\n  function _rerenderScore() {\n    _rerenderScore = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(page) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setPageNumber(page);\n              console.log(\"Rendering Page:\", page);\n              return _context.abrupt(\"return\", SightReaderClient.Instance.renderScore(page).then(function (svg) {\n                setPageSvg(svg);\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _rerenderScore.apply(this, arguments);\n  }\n\n  if (true) {\n    window.rerenderScore = rerenderScore;\n  }\n\n  useEffect(function () {\n    rerenderScore(pageNumber);\n    window.pageNumber = pageNumber;\n  }, [pageNumber]);\n\n  if (true) {\n    window.pageNumber = pageNumber;\n  }\n\n  SightReaderClient.Instance.setSetScoreDisplayPositionRequestedCallback(onSetScoreDisplayPositionRequested);\n\n  function onSetScoreDisplayPositionRequested(command) {\n    console.log(\"Received final set score display position request:\", command.MeasureNumbers, command.GroupIndices);\n    var highestPlayedMeasure = Math.max.apply(Math, _toConsumableArray(command.MeasureNumbers));\n    var measureRange = getPageMeasureRange();\n\n    var _measureRange = _slicedToArray(measureRange, 2),\n        lowestMeasureDisplayed = _measureRange[0],\n        highestMeasureDisplayed = _measureRange[1];\n\n    if (highestPlayedMeasure < lowestMeasureDisplayed) {\n      setPageNumber(Math.max(0, pageNumber - 1));\n    } else if (highestPlayedMeasure > highestMeasureDisplayed) {\n      setPageNumber(pageNumber + 1);\n    } else {\n      highlightMeasure(1, command.MeasureNumbers[0]);\n      highlightMeasure(2, command.MeasureNumbers[1]);\n    }\n  }\n\n  function getPageMeasureRange() {\n    var navigableMeasureNumberEl = document.querySelector(\".mNum\");\n\n    if (!navigableMeasureNumberEl) {\n      console.error(\"Cannot highlight measure because no measure numbers are present on any system on the page.\");\n      return [-1, -1];\n    }\n\n    var navigableMeasureNumber = navigableMeasureNumberEl.textContent ? +navigableMeasureNumberEl.textContent.trim() : -1;\n\n    if (navigableMeasureNumber === -1) {\n      console.error(\"Found measure number element .mNum, but it has no text content so cannot extract measure number.\");\n      return [-1, -1];\n    }\n\n    var navigableMeasureEl = navigableMeasureNumberEl.closest(\".measure\");\n    var pageMeasures = document.querySelectorAll(\".measure\");\n    var navigableMeasureNumberElIndex = -1;\n    var measureRangeLow = 0;\n    var measureRangeHigh = 0;\n    var measuresBeforeNavigable = 0;\n    var measuresAfterNavigable = 0;\n    var foundTargetMeasureEl = false;\n    pageMeasures.forEach(function (measureEl) {\n      if (foundTargetMeasureEl) {\n        return;\n      }\n\n      if (measureEl === navigableMeasureEl) {\n        measuresAfterNavigable = pageMeasures.length - measuresBeforeNavigable - 1;\n        foundTargetMeasureEl = true;\n      } else {\n        measuresBeforeNavigable += 1;\n      }\n    });\n    measureRangeLow = navigableMeasureNumber - measuresBeforeNavigable;\n    measureRangeHigh = navigableMeasureNumber + measuresAfterNavigable;\n    return [measureRangeLow, measureRangeHigh];\n  }\n\n  if (true) {\n    window.getPageMeasureRange = getPageMeasureRange;\n  }\n\n  function highlightMeasure(staff, targetMeasureNum) {\n    if (SightReaderClient.Instance.Score.length === 0) {\n      return;\n    }\n\n    var _getPageMeasureRange = getPageMeasureRange(),\n        _getPageMeasureRange2 = _slicedToArray(_getPageMeasureRange, 2),\n        measureRangeLow = _getPageMeasureRange2[0],\n        measureRangeHigh = _getPageMeasureRange2[1];\n\n    if (targetMeasureNum < measureRangeLow || targetMeasureNum > measureRangeHigh) {\n      console.error(\"Cannot highlight measure \".concat(targetMeasureNum, \". This page only shows measures \").concat(measureRangeLow, \" - \").concat(measureRangeHigh, \".\"));\n    }\n\n    var relativeMeasureNum = targetMeasureNum - measureRangeLow;\n    var measureEls = document.querySelectorAll(\".measure\");\n    var measureEl = measureEls[relativeMeasureNum];\n\n    if (!measureEl) {\n      return;\n    }\n\n    var staffEl = measureEl.querySelectorAll(\".staff\")[staff - 1];\n\n    if (!staffEl) {\n      console.error(\"Could not highlight staff\", staff, \"of measure\", targetMeasureNum, \". The measure element was:\", measureEl);\n      return;\n    }\n\n    var staffBoundingBox = staffEl.getBoundingClientRect();\n\n    if (staff === 1) {\n      setTrebleMeasureHighlightDetails({\n        top: staffBoundingBox.top,\n        left: staffBoundingBox.left,\n        width: staffBoundingBox.width,\n        height: staffBoundingBox.height\n      });\n    } else if (staff === 2) {\n      setBassMeasureHighlightDetails({\n        top: staffBoundingBox.top,\n        left: staffBoundingBox.left,\n        width: staffBoundingBox.width,\n        height: staffBoundingBox.height\n      });\n    } else {\n      console.error(\"Unknown staff\", staff, \"to highlight measure for.\");\n    }\n  }\n\n  if (true) {\n    window.highlightMeasure = highlightMeasure;\n  }\n\n  return __jsx(Box, {\n    flexGrow: 1,\n    flexShrink: 0,\n    maxWidth: 1024\n  }, pageSvg.length === 0 && __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100%\"\n  }, __jsx(MenuBookTwoToneIcon, {\n    className: classes.noScoreLoadedIcon\n  })), __jsx(_JSXStyle, {\n    id: \"918444649\"\n  }, [\"#stage .system>polygon{display:none;}\", \"#stage .rest{display:none;}\"]), __jsx(\"div\", {\n    id: \"measure-highlight-staff-treble\",\n    ref: measureHighlightTrebleRef,\n    style: {\n      position: \"absolute\",\n      width: trebleMeasureHighlightDetails.width,\n      height: trebleMeasureHighlightDetails.height,\n      top: trebleMeasureHighlightDetails.top,\n      left: trebleMeasureHighlightDetails.left,\n      background: \"#457c97\",\n      opacity: 0.25,\n      borderRadius: 0,\n      boxShadow: \"0 0 0 1px #d4d4d5, 0 2px 4px 0 rgba(34,36,38,.12), 0 2px 10px 0 rgba(34,36,38,.15)\"\n    },\n    className: \"jsx-918444649\"\n  }), __jsx(\"div\", {\n    id: \"measure-highlight-staff-bass\",\n    ref: measureHighlightBassRef,\n    style: {\n      position: \"absolute\",\n      width: bassMeasureHighlightDetails.width,\n      height: bassMeasureHighlightDetails.height,\n      top: bassMeasureHighlightDetails.top,\n      left: bassMeasureHighlightDetails.left,\n      background: \"#457c97\",\n      opacity: 0.25,\n      borderRadius: 0,\n      boxShadow: \"0 0 0 1px #d4d4d5, 0 2px 4px 0 rgba(34,36,38,.12), 0 2px 10px 0 rgba(34,36,38,.15)\"\n    },\n    className: \"jsx-918444649\"\n  }), __jsx(\"div\", {\n    id: \"stage\",\n    ref: stageRef,\n    dangerouslySetInnerHTML: {\n      __html: pageSvg\n    },\n    className: \"jsx-918444649\" + \" \" + (classes.stage || \"\")\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}